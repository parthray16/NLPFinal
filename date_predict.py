# -*- coding: utf-8 -*-
"""date_predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-MVHcwiAUM5TWfbZBw4mljfR14wovABe
"""

# !pip install dateparser
# !pip install eml_parser

# from google.colab import drive
# drive.mount('/content/drive')

# %cd '/content/drive/MyDrive/csc482/FinalProject/'

import pandas as pd
import numpy as np
import eml_parser
import dateparser
import os
from nltk.util import ngrams
from tqdm.notebook import tqdm
import re
from bs4 import BeautifulSoup
import email
import datetime
import pickle

df_annot = pd.read_csv('combined_annotations.csv')
df_annot.head()

files = os.listdir('conf_emails_numbered')
files.sort()

def get_dates(text):
    char_nums = []
    text_bubbles = []
    dates = []
    # print(soup.text)
    text += 'dum junk'
    match = re.finditer("\d+/\d+/\d",text)
    for m in match:
        date_str = text[m.start():m.end()]
        datet = dateparser.parse(date_str,settings={'STRICT_PARSING': True})
        if datet:
            char_nums.append(m.start())
            start=max(m.start()-40,0)
            end = min(m.end()+15,len(text))
            text_bubbles.append(re.sub('\s+',' ',text[start:end]))
            dates.append(datet.replace(tzinfo=None))
    match = re.finditer("jan|feb|mar|apr|may|jun|jul|aug|sep|nov|dec",text)
    for m in match:
        date_str = text[m.start()-10:m.end()+15]
        # print(date_str)
        date_str = re.sub('-\s*\d+|,|\s+',' ',date_str)
        toks = re.split('\s+',date_str)
        # print(toks)
        datet=None
        for i in range(len(toks)-3):
            # print('reading:',' '.join(toks[i:i+3]))
            datet = dateparser.parse(' '.join(toks[i:i+3]),settings={'STRICT_PARSING': True})
            part_date = None
            if datet:
                break
            else:
                datet = dateparser.parse(' '.join(toks[i:i+2]))
        if datet:
            # print('found:',datet)
            char_nums.append(m.start())
            start=max(m.start()-40,0)
            end = min(m.end()+15,len(text))
            text_bubbles.append(re.sub('\s+',' ',text[start:end]))
            dates.append(datet.replace(tzinfo=None))
    df_dates = pd.DataFrame()
    df_dates['date']=dates
    xgb_classifier = pickle.load(open('xgb_classifier2.pkl', "rb"))
    tfidfvec = pickle.load(open('tfidfvec2.pkl', "rb"))

    if len(dates)==0:
        return [None,None,None]
    df_dates['text']=text_bubbles
    tfidf_wm = tfidfvec.transform(text_bubbles)
    tfidf_tokens = tfidfvec.get_feature_names_out()
    df_tfidfvect = pd.DataFrame(data = tfidf_wm.toarray(),columns = tfidf_tokens)
    labels = xgb_classifier.predict(df_tfidfvect)
    probas = xgb_classifier.predict_proba(df_tfidfvect)

    df_dates['label']=labels
    df_dates['prob'] = [max(p) for p in probas]
    df_dates.drop_duplicates(inplace=True)
    df_dates = df_dates.loc[df_dates.groupby('label')['prob'].idxmax()]
    conf_date = df_dates[df_dates['label']=='conf_date']['date'].values
    if conf_date.size>0:
        conf_date=datetime.datetime.utcfromtimestamp(conf_date[0].tolist()/1e9).strftime("%A, %d %b %Y")
    else:
        conf_date = None
    sub_date = df_dates[df_dates['label']=='sub_date']['date'].values
    if sub_date.size>0:
        sub_date=datetime.datetime.utcfromtimestamp(sub_date[0].tolist()/1e9).strftime("%A, %d %b %Y")
    else:
        sub_date = None
    notif_date = df_dates[df_dates['label']=='notif_date']['date'].values
    if notif_date.size>0:
        notif_date=datetime.datetime.utcfromtimestamp(notif_date[0].tolist()/1e9).strftime("%A, %d %b %Y")
    else:
        notif_date = None
    
    return [conf_date,
            sub_date,
            notif_date]

def get_text(path):
    with open(path, 'rb') as fhdl:
        raw_email = fhdl.read()
        msg = email.message_from_bytes(raw_email)
        email_body=''
        for part in msg.walk():
            if part.get_content_type().find('text') != -1:
                email_body = part.get_payload(None, True)
        soup = BeautifulSoup(email_body, 'html')
        text = soup.text.lower()
    return(re.sub('\s+',' ',text))

total=0
correct=0
idx=0
for filename in tqdm(files):
    path = 'conf_emails_numbered/'+filename
    text = get_text(path)
    conf_date,sub_date,notif_date=get_dates(text)
    labels = df_annot[df_annot['ID']==idx]
    if len(labels)==0:
        idx+=1
        continue
    true_dates = labels[['Date (Month Day, Year "January 17, 2021")','Submission deadline', 'Notification deadline']].iloc[0]
    true_dates_dt = []
    bad_label=False
    for d in true_dates.values:
        if d is np.nan:
            true_dates_dt.append(None)
        else:
            true_date = dateparser.parse(d)
            if true_date:
                true_dates_dt.append(true_date.strftime("%A, %d %b %Y"))
            else:
                idx+=1
                bad_label=True
                break
    if bad_label:
        continue
    t_conf_date,t_sub_date,t_notif_date=true_dates_dt
    total+=3
    if conf_date==t_conf_date:
        correct+=1
    if sub_date==t_sub_date:
        correct+=1
    if notif_date==t_notif_date:
        correct+=1
    idx+=1
correct/total
# last: 76.2%
# last: 75.3%

path = 'conf_emails_numbered/'+files[300]
text = get_text(path)
get_dates(text)